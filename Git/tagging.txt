Listing tag
=============
$ git tag

$ git tag -l "v1.8.5*"

Creating tag
========================
Two types of tag: lightweight and annotated

A lightweight tag is very much like a branch that doesn’t change — it’s just a pointer to a specific commit.

Annotated tags, however, are stored as full objects in the Git database

Annotated Tags
====================
Creation
-------------
$ git tag -a v1.4 -m "my version 1.4"

The -m specifies a tagging message, which is stored with the tag. If you don’t specify a message for an annotated tag, Git launches your editor so you can type it in.

see the tag data
----------------------
git show v1.4

Lightweight Tags
===================
Creation
----------
$ git tag v1.4-lw

Sharing Tags
======================
By default, the git push command doesn’t transfer tags to remote servers. 
You will have to explicitly push tags to a shared server after you have created them. 
This process is just like sharing remote branches — you can run git push origin <tagname>.

$ git push origin v1.5

If you have a lot of tags that you want to push up at once, you can also use the --tags option to the git push command.
 This will transfer all of your tags to the remote server that are not already there.
 
 $ git push origin --tags
 
Deleting Tags
====================

To delete a tag on your local repository, you can use git tag -d <tagname>. For example, we could remove our lightweight tag above as follows:

$ git tag -d v1.4-lw
Deleted tag 'v1.4-lw' (was e7d5add)

Note that this does not remove the tag from any remote servers. There are two common variations for deleting a tag from a remote server.

The first variation is git push <remote> :refs/tags/<tagname>:

$ git push origin :refs/tags/v1.4-lw
To /git@github.com:schacon/simplegit.git
 - [deleted]         v1.4-lw
 
delete remote tag
-------------------
$ git push origin --delete <tagname>

Checking out Tags
==========================
If you want to view the versions of files a tag is pointing to, you can do a git checkout of that tag, although this puts your repository in “detached HEAD” state, which has some ill side effects:

$ git checkout 2.0.0


